var map;var marker;var rectangle_bounds;var initLat;var initLong;var zoomLevel;var rectangle;					// Adds listener which listens for click in map		function addListenerToMap() {						google.maps.event.addListener(map,'click', function(e) {				// This code will add a marker when the map is clicked 								// Set the hidden input field to the longitude and latitude 				 var elem = document.getElementById("pos");				elem.value = e.latLng;								//If map has not been clicked before, add a marker				if (marker == null){				placeMarker(e.latLng, map);								 //Else change position of the marker			  } else{				  				  marker.setPosition(e.latLng);			  }	 			  			  });		  }		 		  				//Add a marker to the map		function placeMarker(latLng, map) {  			    marker = new google.maps.Marker({				position: latLng,				map: map,				draggable:true,    			title:"Drag me!"  				});												}					// Initializes the map		function initMap() {		  map = new google.maps.Map(document.getElementById('map'), {			zoom: zoomLevel,			center: {lat: initLat, lng: initLong},			mapTypeId: google.maps.MapTypeId.ROADMAP		  });			// This example adds a user-editable rectangle to the map.        var bounds = {          north: initLat+0.5,          south: initLat-0.5,          east: initLong+1,          west: initLong-1        };        // Define a rectangle and set its editable and draggable property to true.        var rectangle = new google.maps.Rectangle({          bounds: bounds,		  draggable: true,          editable: true        });        rectangle.setMap(map);		rectangle.addListener('bounds_changed', getRectangleBounds);		rectangle.addListener('tilesloaded', getRectangleBounds);		getRectangleBounds();				function getRectangleBounds(event) {			         	var ne = rectangle.getBounds().getNorthEast();        	var sw = rectangle.getBounds().getSouthWest();					var north = ne.lat();			var east = ne.lng(); 			var south = sw.lat();			var west = sw.lng();						var html_elem = document.getElementById("rect_bounds");			html_elem.value = [north, east, south, west];      }				//TODO: Should this be kept?        map.data.addListener('mouseout', function(event) {          map.data.revertStyle();        });								// Search box         var input = document.getElementById('pac-input');        var searchBox = new google.maps.places.SearchBox(input);        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);				map.addListener('bounds_changed', function() {          searchBox.setBounds(map.getBounds());        });		//Markers        var markers = [];           searchBox.addListener('places_changed', function() {          var places = searchBox.getPlaces();          if (places.length == 0) {            return;          }             markers.forEach(function(marker) {            marker.setMap(null);          });          markers = [];          var bounds = new google.maps.LatLngBounds();          places.forEach(function(place) {            var icon = {              url: place.icon,              size: new google.maps.Size(71, 71),              origin: new google.maps.Point(0, 0),              anchor: new google.maps.Point(17, 34),              scaledSize: new google.maps.Size(25, 25)            };            markers.push(new google.maps.Marker({              map: map,              icon: icon,              title: place.name,              position: place.geometry.location            }));            if (place.geometry.viewport) {              bounds.union(place.geometry.viewport);            } else {              bounds.extend(place.geometry.location);            }          });          map.fitBounds(bounds);        });						}